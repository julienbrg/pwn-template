// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kHKDxG4mQC7eBDvtRUBubb
// Component: AkRKLLayuUUX2
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: xeRLPiLVEkvoU/component
import Button from "../../Button"; // plasmic-import: GNFgpNFk8E3PZ/component
import Footer from "../../Footer"; // plasmic-import: kyfQho-95sNTo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../template_collective_codegen/plasmic_template_collective_codegen.module.css"; // plasmic-import: kHKDxG4mQC7eBDvtRUBubb/projectcss
import sty from "./PlasmicPlay.module.css"; // plasmic-import: AkRKLLayuUUX2/css

import ChecksvgIcon from "../template_collective_codegen/icons/PlasmicIcon__Checksvg"; // plasmic-import: TtTElwvh0AeFRR/icon
import IconIcon from "../template_collective_codegen/icons/PlasmicIcon__Icon"; // plasmic-import: lQPCSOthOuEyZ3/icon

export type PlasmicPlay__VariantMembers = {};
export type PlasmicPlay__VariantsArgs = {};
type VariantPropType = keyof PlasmicPlay__VariantsArgs;
export const PlasmicPlay__VariantProps = new Array<VariantPropType>();

export type PlasmicPlay__ArgsType = {};
type ArgPropType = keyof PlasmicPlay__ArgsType;
export const PlasmicPlay__ArgProps = new Array<ArgPropType>();

export type PlasmicPlay__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  freeBox?: p.Flex<"div">;
  playground?: p.Flex<"div">;
  action?: p.Flex<typeof Button>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPlayProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicPlay__RenderFunc(props: {
  variants: PlasmicPlay__VariantsArgs;
  args: PlasmicPlay__ArgsType;
  overrides: PlasmicPlay__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPlay.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPlay.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPlay.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"playground"}
              data-plasmic-override={overrides.playground}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.playground
              )}
            >
              {"0x0000000000000000000000000000000000000000"}
            </div>

            <Button
              data-plasmic-name={"action"}
              data-plasmic-override={overrides.action}
              className={classNames("__wab_instance", sty.action)}
            />
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "freeBox", "playground", "action", "footer"],
  header: ["header"],
  freeBox: ["freeBox", "playground", "action"],
  playground: ["playground"],
  action: ["action"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  playground: "div";
  action: typeof Button;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPlay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPlay__VariantsArgs;
    args?: PlasmicPlay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPlay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPlay__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPlay__ArgProps,
          internalVariantPropNames: PlasmicPlay__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPlay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlay";
  } else {
    func.displayName = `PlasmicPlay.${nodeName}`;
  }
  return func;
}

export const PlasmicPlay = Object.assign(
  // Top-level PlasmicPlay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    playground: makeNodeComponent("playground"),
    action: makeNodeComponent("action"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPlay
    internalVariantProps: PlasmicPlay__VariantProps,
    internalArgProps: PlasmicPlay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Playground",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPlay;
/* prettier-ignore-end */
